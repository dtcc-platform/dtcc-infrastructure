on:
    workflow_dispatch:
    pull_request:
    push:
      branches:
        - main
    release:
      types:
        - published

jobs:
    run_tests:
      name: Run tests on ${{ matrix.os }}
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          os: [ubuntu-latest, macos-latest, windows-latest]
          python-version: ["3.10"]
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-python@v3
        - name: Ubuntu demo running
          if: matrix.os == 'ubuntu-latest'
          run:  |
                #sudo apt-get install libassimp-dev python3-opengl
                python -m venv venv
                source venv/bin/activate  # Linux/macOS
                pip install dtcc
                pip install pyassimp PyOpenGL PyOpenGL_accelerate
                dtcc-download-demo-data
                #python demos/CI/comment_out.py
                ls -altR
                cd venv/lib/python3.10/site-packages
                ls -altR
                for script in demos/*.py; do
                  if [ "$(basename "$script")" != "view_pointcloud.py" ]; then
                   python "$script"
                  else
                   echo "Skipping dtcc-viewer demo"
                  fi
                done      
          shell: bash
        - name: MacOS demo running
          if: matrix.os == 'macos-latest'
          run:  |
                python -m venv venv
                source venv/bin/activate  # Linux/macOS
                pip install dtcc
                ls -altR
                #pip install pyassimp PyOpenGL PyOpenGL_accelerate
                cd venv/lib/python3.10/site-packages
                ls -altR
                
                #sudo apt-get install libassimp-dev python3-opengl #this won't work on MacOS
                brew install glfw3
                dtcc-download-demo-data
                #python demos/CI/comment_out.py
                cd 
                for script in demos/*.py; do
                if [ "$(basename "$script")" != "view_pointcloud.py" ]; then
                   python "$script"
                else
                  echo "Skipping dtcc-viewer demo"
                fi
                done
          shell: bash
        - name: Windows
          if: matrix.os == 'windows-latest'
          #run: pip install .; if ($?) { cd tests; if ($?) { ./run-tests } }
          run: |
               pip install dtcc
               dtcc-download-demo-data
               #python demos/CI/comment_out.py
               $skipScripts = @('view_pointcloud.py')
               Get-ChildItem -Path .\demos -Filter *.py | ForEach-Object { 
               if ($skipScripts -notcontains $_.Name) { 
               Write-Host "Running script: $($_.Name)"
               python $_.FullName 
               } else {
               Write-Host "Skipping script: $($_.Name)"
               }
               }
          shell: powershell
        - name: Report success on non-Windows
          if: runner.os != 'Windows' && success()
          #with:
          # status: ${{ job.status }}
           # notify_when: 'failure'
          run: |
            curl -L -X POST $SLACK_URL -d "payload={\"channel\": \"#development\", \"username\": \"Github Runner\", \"text\": \"All tests have passed! Repo: ${{ github.event.repository.name }}. Commit message: ${{ github.event.head_commit.message }}. Author: ${{ github.event.commits[0].author.name}}
            \", \"icon_emoji\": \":champagne:\"}"
          env:
           SLACK_URL: ${{ secrets.SLACK_URL }}
        - name: Report success on Windows
          if: runner.os == 'Windows' && success()
          #with:
          # status: ${{ job.status }}
           # notify_when: 'failure'
          run: |
            $SLACK_URL = "${{ secrets.SLACK_URL }}"
            $jsonPayload = @{
            channel = "#development"
            username = "Github Runner"
            text = "All tests have passed! Repo: ${{ github.event.repository.name }}. Commit message: ${{ github.event.head_commit.message }}. Author: ${{ github.event.commits[0].author.name }}"
            icon_emoji = ":champagne:"
            }
            $body = @{
            payload = ($jsonPayload | ConvertTo-Json -Compress)
            }
            Invoke-WebRequest -Uri $SLACK_URL -Method Post -Body $body
          env:
            SLACK_URL: ${{ secrets.SLACK_URL }}    
